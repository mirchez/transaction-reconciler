generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  ledgers         Ledger[]
  banks           Bank[]
  matched         Matched[]
  processedEmails ProcessedEmail[]
}

model Ledger {
  id          String    @id @default(cuid())
  userEmail   String
  date        DateTime
  type        String?
  num         String?
  name        String?
  description String
  account     String?
  split       String?
  debit       Decimal?  @db.Decimal(12, 2)
  credit      Decimal?  @db.Decimal(12, 2)
  balance     Decimal?  @db.Decimal(12, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userEmail], references: [email])
  matched     Matched[]
  
  @@index([userEmail])
  @@index([date])
}

model Bank {
  id          String    @id @default(cuid())
  userEmail   String
  date        DateTime
  description String
  amount      Decimal   @db.Decimal(12, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userEmail], references: [email])
  matched     Matched[]
  
  @@index([userEmail])
  @@index([date])
}

model Matched {
  id               String   @id @default(cuid())
  userEmail        String
  ledgerId         String
  bankId           String
  bankTransaction  String   // Formatted string: "From: [description] $[amount] on [date]"
  description      String   // Ledger description
  amount           Decimal  @db.Decimal(12, 2)
  date             DateTime // Ledger date
  createdAt        DateTime @default(now())
  
  user             User     @relation(fields: [userEmail], references: [email])
  ledger           Ledger   @relation(fields: [ledgerId], references: [id], onDelete: Cascade)
  bank             Bank     @relation(fields: [bankId], references: [id], onDelete: Cascade)
  
  @@unique([ledgerId, bankId])
  @@index([userEmail])
}

model GoogleAuth {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  accessToken  String
  refreshToken String?
  expiryDate   DateTime?
  scope        String
  tokenType    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ProcessedEmail {
  id              String   @id @default(cuid())
  gmailId         String   @unique
  userEmail       String
  subject         String
  from            String
  attachmentCount Int      @default(0)
  processedAt     DateTime @default(now())
  
  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  
  @@index([userEmail])
  @@index([processedAt])
}
